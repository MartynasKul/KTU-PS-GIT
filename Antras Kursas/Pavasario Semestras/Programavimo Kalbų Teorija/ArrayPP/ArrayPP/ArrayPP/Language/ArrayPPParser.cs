//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/HP/RiderProjects/ArrayPP/ArrayPP/ArrayPP/Language\ArrayPP.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class ArrayPPParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, INTEGER=47, FLOAT=48, STRING=49, CHAR=50, BOOL=51, NULL=52, 
		COMMENT=53, WS=54, IDENTIFIER=55;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_statement = 2, RULE_ifBlock = 3, 
		RULE_elseIfBlock = 4, RULE_declaration = 5, RULE_variableDeclaration = 6, 
		RULE_assignment = 7, RULE_arrayAssignment = 8, RULE_arrayRemoval = 9, 
		RULE_arrayInsert = 10, RULE_arrayLength = 11, RULE_arrayRandomiser = 12, 
		RULE_arrayFill = 13, RULE_arrayFilter = 14, RULE_arrayUnique = 15, RULE_arraySlice = 16, 
		RULE_functionCall = 17, RULE_forCycle = 18, RULE_whileCycle = 19, RULE_function = 20, 
		RULE_return = 21, RULE_printToScreen = 22, RULE_readFromFile = 23, RULE_substring = 24, 
		RULE_split = 25, RULE_expression = 26, RULE_multOp = 27, RULE_addOp = 28, 
		RULE_compareOp = 29, RULE_boolOp = 30, RULE_arrayLiteral = 31, RULE_expressionList = 32, 
		RULE_indexAccess = 33, RULE_primitiveType = 34, RULE_type = 35, RULE_constant = 36, 
		RULE_block = 37;
	public static readonly string[] ruleNames = {
		"program", "line", "statement", "ifBlock", "elseIfBlock", "declaration", 
		"variableDeclaration", "assignment", "arrayAssignment", "arrayRemoval", 
		"arrayInsert", "arrayLength", "arrayRandomiser", "arrayFill", "arrayFilter", 
		"arrayUnique", "arraySlice", "functionCall", "forCycle", "whileCycle", 
		"function", "return", "printToScreen", "readFromFile", "substring", "split", 
		"expression", "multOp", "addOp", "compareOp", "boolOp", "arrayLiteral", 
		"expressionList", "indexAccess", "primitiveType", "type", "constant", 
		"block"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'if'", "'('", "')'", "'else'", "'='", "'['", "']'", "'.remove'", 
		"'.insert('", "','", "'.length'", "'.randomise'", "'.fill('", "'.filter('", 
		"'.unique'", "'.slice('", "'for'", "'while'", "'function'", "':'", "'return'", 
		"'print('", "'readFile('", "'substring('", "'.split('", "'*'", "'/'", 
		"'+'", "'-'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'&&'", "'||'", 
		"'[]'", "'int'", "'char'", "'string'", "'bool'", "'float'", "'{'", "'}'", 
		null, null, null, null, null, "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "INTEGER", 
		"FLOAT", "STRING", "CHAR", "BOOL", "NULL", "COMMENT", "WS", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ArrayPP.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ArrayPPParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ArrayPPParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ArrayPPParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ArrayPPParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 36062881893842948L) != 0)) {
				{
				{
				State = 76;
				line();
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 82;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForCycleContext forCycle() {
			return GetRuleContext<ForCycleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileCycleContext whileCycle() {
			return GetRuleContext<WhileCycleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintToScreenContext printToScreen() {
			return GetRuleContext<PrintToScreenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAssignmentContext arrayAssignment() {
			return GetRuleContext<ArrayAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayRemovalContext arrayRemoval() {
			return GetRuleContext<ArrayRemovalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInsertContext arrayInsert() {
			return GetRuleContext<ArrayInsertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayRandomiserContext arrayRandomiser() {
			return GetRuleContext<ArrayRandomiserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayFillContext arrayFill() {
			return GetRuleContext<ArrayFillContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayFilterContext arrayFilter() {
			return GetRuleContext<ArrayFilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayUniqueContext arrayUnique() {
			return GetRuleContext<ArrayUniqueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArraySliceContext arraySlice() {
			return GetRuleContext<ArraySliceContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 132;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86;
				declaration();
				State = 87;
				Match(T__0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 89;
				variableDeclaration();
				State = 90;
				Match(T__0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 92;
				assignment();
				State = 93;
				Match(T__0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 95;
				functionCall();
				State = 96;
				Match(T__0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 98;
				ifBlock();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 99;
				forCycle();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 100;
				whileCycle();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 101;
				function();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 102;
				printToScreen();
				State = 103;
				Match(T__0);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 105;
				@return();
				State = 106;
				Match(T__0);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 108;
				arrayAssignment();
				State = 109;
				Match(T__0);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 111;
				arrayRemoval();
				State = 112;
				Match(T__0);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 114;
				arrayInsert();
				State = 115;
				Match(T__0);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 117;
				arrayRandomiser();
				State = 118;
				Match(T__0);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 120;
				arrayFill();
				State = 121;
				Match(T__0);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 123;
				arrayFilter();
				State = 124;
				Match(T__0);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 126;
				arrayUnique();
				State = 127;
				Match(T__0);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 129;
				arraySlice();
				State = 130;
				Match(T__0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfBlockContext elseIfBlock() {
			return GetRuleContext<ElseIfBlockContext>(0);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_ifBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(T__1);
			State = 135;
			Match(T__2);
			State = 136;
			expression(0);
			State = 137;
			Match(T__3);
			State = 138;
			block();
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 139;
				Match(T__4);
				State = 140;
				elseIfBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterElseIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitElseIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_elseIfBlock);
		try {
			State = 145;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__44:
				EnterOuterAlt(_localctx, 1);
				{
				State = 143;
				block();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 144;
				ifBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArrayPPParser.IDENTIFIER, 0); }
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			type();
			State = 148;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			declaration();
			State = 151;
			Match(T__5);
			State = 154;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 152;
				expression(0);
				}
				break;
			case 2:
				{
				State = 153;
				arrayLiteral();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArrayPPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 14, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(IDENTIFIER);
			State = 157;
			Match(T__5);
			State = 158;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArrayPPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterArrayAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitArrayAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAssignmentContext arrayAssignment() {
		ArrayAssignmentContext _localctx = new ArrayAssignmentContext(Context, State);
		EnterRule(_localctx, 16, RULE_arrayAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			Match(IDENTIFIER);
			State = 161;
			Match(T__6);
			State = 162;
			expression(0);
			State = 163;
			Match(T__7);
			State = 164;
			Match(T__5);
			State = 165;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayRemovalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArrayPPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayRemovalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayRemoval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterArrayRemoval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitArrayRemoval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayRemoval(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayRemovalContext arrayRemoval() {
		ArrayRemovalContext _localctx = new ArrayRemovalContext(Context, State);
		EnterRule(_localctx, 18, RULE_arrayRemoval);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(IDENTIFIER);
			State = 168;
			Match(T__6);
			State = 169;
			expression(0);
			State = 170;
			Match(T__7);
			State = 171;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInsertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArrayPPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ArrayInsertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInsert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterArrayInsert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitArrayInsert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInsert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInsertContext arrayInsert() {
		ArrayInsertContext _localctx = new ArrayInsertContext(Context, State);
		EnterRule(_localctx, 20, RULE_arrayInsert);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 173;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				{
				State = 174;
				functionCall();
				}
				break;
			}
			State = 177;
			Match(T__9);
			State = 178;
			expression(0);
			State = 179;
			Match(T__10);
			State = 180;
			expression(0);
			State = 181;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArrayPPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ArrayLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterArrayLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitArrayLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLengthContext arrayLength() {
		ArrayLengthContext _localctx = new ArrayLengthContext(Context, State);
		EnterRule(_localctx, 22, RULE_arrayLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 183;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				{
				State = 184;
				functionCall();
				}
				break;
			}
			State = 187;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayRandomiserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArrayPPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ArrayRandomiserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayRandomiser; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterArrayRandomiser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitArrayRandomiser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayRandomiser(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayRandomiserContext arrayRandomiser() {
		ArrayRandomiserContext _localctx = new ArrayRandomiserContext(Context, State);
		EnterRule(_localctx, 24, RULE_arrayRandomiser);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 189;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				{
				State = 190;
				functionCall();
				}
				break;
			}
			State = 193;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayFillContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArrayPPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ArrayFillContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayFill; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterArrayFill(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitArrayFill(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayFill(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayFillContext arrayFill() {
		ArrayFillContext _localctx = new ArrayFillContext(Context, State);
		EnterRule(_localctx, 26, RULE_arrayFill);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 195;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				{
				State = 196;
				functionCall();
				}
				break;
			}
			State = 199;
			Match(T__13);
			State = 200;
			expression(0);
			State = 201;
			Match(T__10);
			State = 202;
			expression(0);
			State = 203;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayFilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArrayPPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ArrayFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayFilter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterArrayFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitArrayFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayFilterContext arrayFilter() {
		ArrayFilterContext _localctx = new ArrayFilterContext(Context, State);
		EnterRule(_localctx, 28, RULE_arrayFilter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 205;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				{
				State = 206;
				functionCall();
				}
				break;
			}
			State = 209;
			Match(T__14);
			State = 210;
			expression(0);
			State = 211;
			Match(T__10);
			State = 212;
			expression(0);
			State = 213;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayUniqueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArrayPPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ArrayUniqueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayUnique; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterArrayUnique(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitArrayUnique(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayUnique(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayUniqueContext arrayUnique() {
		ArrayUniqueContext _localctx = new ArrayUniqueContext(Context, State);
		EnterRule(_localctx, 30, RULE_arrayUnique);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 215;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				{
				State = 216;
				functionCall();
				}
				break;
			}
			State = 219;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraySliceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArrayPPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ArraySliceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraySlice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterArraySlice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitArraySlice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraySlice(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraySliceContext arraySlice() {
		ArraySliceContext _localctx = new ArraySliceContext(Context, State);
		EnterRule(_localctx, 32, RULE_arraySlice);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 221;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				{
				State = 222;
				functionCall();
				}
				break;
			}
			State = 225;
			Match(T__16);
			State = 226;
			expression(0);
			State = 227;
			Match(T__10);
			State = 228;
			expression(0);
			State = 229;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArrayPPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 34, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			Match(IDENTIFIER);
			State = 232;
			Match(T__2);
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 44895808591495304L) != 0)) {
				{
				State = 233;
				expression(0);
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__10) {
					{
					{
					State = 234;
					Match(T__10);
					State = 235;
					expression(0);
					}
					}
					State = 240;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 243;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForCycleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public ForCycleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forCycle; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterForCycle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitForCycle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForCycle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForCycleContext forCycle() {
		ForCycleContext _localctx = new ForCycleContext(Context, State);
		EnterRule(_localctx, 36, RULE_forCycle);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			Match(T__17);
			State = 246;
			Match(T__2);
			State = 249;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
				{
				State = 247;
				variableDeclaration();
				}
				break;
			case IDENTIFIER:
				{
				State = 248;
				assignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 251;
			Match(T__0);
			State = 252;
			expression(0);
			State = 253;
			Match(T__0);
			State = 254;
			assignment();
			State = 255;
			Match(T__3);
			State = 256;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileCycleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileCycleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileCycle; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterWhileCycle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitWhileCycle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileCycle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileCycleContext whileCycle() {
		WhileCycleContext _localctx = new WhileCycleContext(Context, State);
		EnterRule(_localctx, 38, RULE_whileCycle);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			Match(T__18);
			State = 259;
			Match(T__2);
			State = 260;
			expression(0);
			State = 261;
			Match(T__3);
			State = 262;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArrayPPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 40, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			Match(T__19);
			State = 265;
			Match(IDENTIFIER);
			State = 266;
			Match(T__2);
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 34084860461056L) != 0)) {
				{
				State = 267;
				declaration();
				State = 272;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__10) {
					{
					{
					State = 268;
					Match(T__10);
					State = 269;
					declaration();
					}
					}
					State = 274;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 277;
			Match(T__3);
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				State = 278;
				Match(T__20);
				State = 279;
				type();
				}
			}

			State = 282;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 42, RULE_return);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			Match(T__21);
			State = 286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 44895808591495304L) != 0)) {
				{
				State = 285;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintToScreenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintToScreenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printToScreen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterPrintToScreen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitPrintToScreen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintToScreen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintToScreenContext printToScreen() {
		PrintToScreenContext _localctx = new PrintToScreenContext(Context, State);
		EnterRule(_localctx, 44, RULE_printToScreen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			Match(T__22);
			State = 289;
			expression(0);
			State = 290;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadFromFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReadFromFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readFromFile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterReadFromFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitReadFromFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadFromFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadFromFileContext readFromFile() {
		ReadFromFileContext _localctx = new ReadFromFileContext(Context, State);
		EnterRule(_localctx, 46, RULE_readFromFile);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			Match(T__23);
			State = 293;
			expression(0);
			State = 294;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubstringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SubstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substring; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterSubstring(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitSubstring(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstring(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubstringContext substring() {
		SubstringContext _localctx = new SubstringContext(Context, State);
		EnterRule(_localctx, 48, RULE_substring);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			Match(T__24);
			State = 297;
			expression(0);
			State = 298;
			Match(T__10);
			State = 299;
			expression(0);
			State = 300;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SplitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArrayPPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SplitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_split; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterSplit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitSplit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSplit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SplitContext split() {
		SplitContext _localctx = new SplitContext(Context, State);
		EnterRule(_localctx, 50, RULE_split);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 302;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				{
				State = 303;
				functionCall();
				}
				break;
			}
			State = 306;
			Match(T__25);
			{
			State = 307;
			expression(0);
			}
			State = 308;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArrayExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public ArrayExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterArrayExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitArrayExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolOpContext boolOp() {
			return GetRuleContext<BoolOpContext>(0);
		}
		public BoolExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterBoolExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitBoolExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArrayPPParser.IDENTIFIER, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterParenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitParenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LengthExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLengthContext arrayLength() {
			return GetRuleContext<ArrayLengthContext>(0);
		}
		public LengthExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterLengthExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitLengthExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLengthExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompareExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareOpContext compareOp() {
			return GetRuleContext<CompareOpContext>(0);
		}
		public CompareExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterCompareExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitCompareExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UniqueExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayUniqueContext arrayUnique() {
			return GetRuleContext<ArrayUniqueContext>(0);
		}
		public UniqueExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterUniqueExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitUniqueExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniqueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddOpContext addOp() {
			return GetRuleContext<AddOpContext>(0);
		}
		public AddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SplitExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SplitContext split() {
			return GetRuleContext<SplitContext>(0);
		}
		public SplitExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterSplitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitSplitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSplitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultOpContext multOp() {
			return GetRuleContext<MultOpContext>(0);
		}
		public MultExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterMultExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitMultExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexAccessExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexAccessContext indexAccess() {
			return GetRuleContext<IndexAccessContext>(0);
		}
		public IndexAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterIndexAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitIndexAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReadFromFileExprissionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReadFromFileContext readFromFile() {
			return GetRuleContext<ReadFromFileContext>(0);
		}
		public ReadFromFileExprissionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterReadFromFileExprission(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitReadFromFileExprission(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadFromFileExprission(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubstringExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubstringContext substring() {
			return GetRuleContext<SubstringContext>(0);
		}
		public SubstringExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterSubstringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitSubstringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 311;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 312;
				functionCall();
				}
				break;
			case 3:
				{
				_localctx = new ParenExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 313;
				Match(T__2);
				State = 314;
				expression(0);
				State = 315;
				Match(T__3);
				}
				break;
			case 4:
				{
				_localctx = new ArrayExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 317;
				arrayLiteral();
				}
				break;
			case 5:
				{
				_localctx = new IndexAccessExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 318;
				indexAccess();
				}
				break;
			case 6:
				{
				_localctx = new ReadFromFileExprissionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 319;
				readFromFile();
				}
				break;
			case 7:
				{
				_localctx = new SubstringExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 320;
				substring();
				}
				break;
			case 8:
				{
				_localctx = new SplitExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 321;
				split();
				}
				break;
			case 9:
				{
				_localctx = new LengthExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 322;
				arrayLength();
				}
				break;
			case 10:
				{
				_localctx = new UniqueExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 323;
				arrayUnique();
				}
				break;
			case 11:
				{
				_localctx = new ConstantExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 324;
				constant();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 345;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 343;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
					case 1:
						{
						_localctx = new MultExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 327;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 328;
						multOp();
						State = 329;
						expression(13);
						}
						break;
					case 2:
						{
						_localctx = new AddExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 331;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 332;
						addOp();
						State = 333;
						expression(12);
						}
						break;
					case 3:
						{
						_localctx = new CompareExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 335;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 336;
						compareOp();
						State = 337;
						expression(11);
						}
						break;
					case 4:
						{
						_localctx = new BoolExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 339;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 340;
						boolOp();
						State = 341;
						expression(10);
						}
						break;
					}
					} 
				}
				State = 347;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultOpContext : ParserRuleContext {
		public MultOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterMultOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitMultOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOpContext multOp() {
		MultOpContext _localctx = new MultOpContext(Context, State);
		EnterRule(_localctx, 54, RULE_multOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			_la = TokenStream.LA(1);
			if ( !(_la==T__26 || _la==T__27) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOpContext : ParserRuleContext {
		public AddOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterAddOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitAddOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOpContext addOp() {
		AddOpContext _localctx = new AddOpContext(Context, State);
		EnterRule(_localctx, 56, RULE_addOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			_la = TokenStream.LA(1);
			if ( !(_la==T__28 || _la==T__29) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOpContext : ParserRuleContext {
		public CompareOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterCompareOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitCompareOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareOpContext compareOp() {
		CompareOpContext _localctx = new CompareOpContext(Context, State);
		EnterRule(_localctx, 58, RULE_compareOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 135291469824L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolOpContext : ParserRuleContext {
		public BoolOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterBoolOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitBoolOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolOpContext boolOp() {
		BoolOpContext _localctx = new BoolOpContext(Context, State);
		EnterRule(_localctx, 60, RULE_boolOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			_la = TokenStream.LA(1);
			if ( !(_la==T__36 || _la==T__37) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 62, RULE_arrayLiteral);
		int _la;
		try {
			State = 362;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 356;
				Match(T__6);
				State = 358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 44895808591495304L) != 0)) {
					{
					State = 357;
					expressionList();
					}
				}

				State = 360;
				Match(T__7);
				}
				}
				break;
			case T__38:
				EnterOuterAlt(_localctx, 2);
				{
				State = 361;
				Match(T__38);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 64, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			expression(0);
			State = 369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__10) {
				{
				{
				State = 365;
				Match(T__10);
				{
				State = 366;
				expression(0);
				}
				}
				}
				State = 371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArrayPPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IndexAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterIndexAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitIndexAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexAccessContext indexAccess() {
		IndexAccessContext _localctx = new IndexAccessContext(Context, State);
		EnterRule(_localctx, 66, RULE_indexAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			Match(IDENTIFIER);
			State = 373;
			Match(T__6);
			State = 374;
			expression(0);
			State = 375;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 68, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 34084860461056L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 70, RULE_type);
		try {
			State = 383;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 379;
				primitiveType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 380;
				primitiveType();
				State = 381;
				Match(T__38);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
	 
		public ConstantContext() { }
		public virtual void CopyFrom(ConstantContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CharConstantContext : ConstantContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(ArrayPPParser.CHAR, 0); }
		public CharConstantContext(ConstantContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterCharConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitCharConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringConstantContext : ConstantContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ArrayPPParser.STRING, 0); }
		public StringConstantContext(ConstantContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterStringConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitStringConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatConstantContext : ConstantContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(ArrayPPParser.FLOAT, 0); }
		public FloatConstantContext(ConstantContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterFloatConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitFloatConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntegerConstantContext : ConstantContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(ArrayPPParser.INTEGER, 0); }
		public IntegerConstantContext(ConstantContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterIntegerConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitIntegerConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullConstantContext : ConstantContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(ArrayPPParser.NULL, 0); }
		public NullConstantContext(ConstantContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterNullConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitNullConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolConstantContext : ConstantContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(ArrayPPParser.BOOL, 0); }
		public BoolConstantContext(ConstantContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterBoolConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitBoolConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 72, RULE_constant);
		try {
			State = 391;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				_localctx = new IntegerConstantContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 385;
				Match(INTEGER);
				}
				break;
			case FLOAT:
				_localctx = new FloatConstantContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 386;
				Match(FLOAT);
				}
				break;
			case STRING:
				_localctx = new StringConstantContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 387;
				Match(STRING);
				}
				break;
			case BOOL:
				_localctx = new BoolConstantContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 388;
				Match(BOOL);
				}
				break;
			case CHAR:
				_localctx = new CharConstantContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 389;
				Match(CHAR);
				}
				break;
			case NULL:
				_localctx = new NullConstantContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 390;
				Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArrayPPListener typedListener = listener as IArrayPPListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArrayPPVisitor<TResult> typedVisitor = visitor as IArrayPPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 74, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			Match(T__44);
			State = 397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 36062881893842948L) != 0)) {
				{
				{
				State = 394;
				line();
				}
				}
				State = 399;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 400;
			Match(T__45);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 26: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 12);
		case 1: return Precpred(Context, 11);
		case 2: return Precpred(Context, 10);
		case 3: return Precpred(Context, 9);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,55,403,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,1,0,5,0,78,8,0,10,0,12,0,81,9,0,1,0,1,0,1,1,1,1,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,133,8,2,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,3,3,142,8,3,1,4,1,4,3,4,146,8,4,1,5,1,5,1,5,1,6,1,6,1,6,1,
		6,3,6,155,8,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,
		1,9,1,9,1,9,1,10,1,10,3,10,176,8,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,
		1,11,3,11,186,8,11,1,11,1,11,1,12,1,12,3,12,192,8,12,1,12,1,12,1,13,1,
		13,3,13,198,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,3,14,208,8,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,3,15,218,8,15,1,15,1,15,1,16,1,
		16,3,16,224,8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,
		5,17,237,8,17,10,17,12,17,240,9,17,3,17,242,8,17,1,17,1,17,1,18,1,18,1,
		18,1,18,3,18,250,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,
		1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,5,20,271,8,20,10,20,12,20,
		274,9,20,3,20,276,8,20,1,20,1,20,1,20,3,20,281,8,20,1,20,1,20,1,21,1,21,
		3,21,287,8,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,
		24,1,24,1,24,1,25,1,25,3,25,305,8,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,
		1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,326,8,
		26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
		26,1,26,1,26,5,26,344,8,26,10,26,12,26,347,9,26,1,27,1,27,1,28,1,28,1,
		29,1,29,1,30,1,30,1,31,1,31,3,31,359,8,31,1,31,1,31,3,31,363,8,31,1,32,
		1,32,1,32,5,32,368,8,32,10,32,12,32,371,9,32,1,33,1,33,1,33,1,33,1,33,
		1,34,1,34,1,35,1,35,1,35,1,35,3,35,384,8,35,1,36,1,36,1,36,1,36,1,36,1,
		36,3,36,392,8,36,1,37,1,37,5,37,396,8,37,10,37,12,37,399,9,37,1,37,1,37,
		1,37,0,1,52,38,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,0,5,1,0,27,28,1,
		0,29,30,1,0,31,36,1,0,37,38,1,0,40,44,424,0,79,1,0,0,0,2,84,1,0,0,0,4,
		132,1,0,0,0,6,134,1,0,0,0,8,145,1,0,0,0,10,147,1,0,0,0,12,150,1,0,0,0,
		14,156,1,0,0,0,16,160,1,0,0,0,18,167,1,0,0,0,20,175,1,0,0,0,22,185,1,0,
		0,0,24,191,1,0,0,0,26,197,1,0,0,0,28,207,1,0,0,0,30,217,1,0,0,0,32,223,
		1,0,0,0,34,231,1,0,0,0,36,245,1,0,0,0,38,258,1,0,0,0,40,264,1,0,0,0,42,
		284,1,0,0,0,44,288,1,0,0,0,46,292,1,0,0,0,48,296,1,0,0,0,50,304,1,0,0,
		0,52,325,1,0,0,0,54,348,1,0,0,0,56,350,1,0,0,0,58,352,1,0,0,0,60,354,1,
		0,0,0,62,362,1,0,0,0,64,364,1,0,0,0,66,372,1,0,0,0,68,377,1,0,0,0,70,383,
		1,0,0,0,72,391,1,0,0,0,74,393,1,0,0,0,76,78,3,2,1,0,77,76,1,0,0,0,78,81,
		1,0,0,0,79,77,1,0,0,0,79,80,1,0,0,0,80,82,1,0,0,0,81,79,1,0,0,0,82,83,
		5,0,0,1,83,1,1,0,0,0,84,85,3,4,2,0,85,3,1,0,0,0,86,87,3,10,5,0,87,88,5,
		1,0,0,88,133,1,0,0,0,89,90,3,12,6,0,90,91,5,1,0,0,91,133,1,0,0,0,92,93,
		3,14,7,0,93,94,5,1,0,0,94,133,1,0,0,0,95,96,3,34,17,0,96,97,5,1,0,0,97,
		133,1,0,0,0,98,133,3,6,3,0,99,133,3,36,18,0,100,133,3,38,19,0,101,133,
		3,40,20,0,102,103,3,44,22,0,103,104,5,1,0,0,104,133,1,0,0,0,105,106,3,
		42,21,0,106,107,5,1,0,0,107,133,1,0,0,0,108,109,3,16,8,0,109,110,5,1,0,
		0,110,133,1,0,0,0,111,112,3,18,9,0,112,113,5,1,0,0,113,133,1,0,0,0,114,
		115,3,20,10,0,115,116,5,1,0,0,116,133,1,0,0,0,117,118,3,24,12,0,118,119,
		5,1,0,0,119,133,1,0,0,0,120,121,3,26,13,0,121,122,5,1,0,0,122,133,1,0,
		0,0,123,124,3,28,14,0,124,125,5,1,0,0,125,133,1,0,0,0,126,127,3,30,15,
		0,127,128,5,1,0,0,128,133,1,0,0,0,129,130,3,32,16,0,130,131,5,1,0,0,131,
		133,1,0,0,0,132,86,1,0,0,0,132,89,1,0,0,0,132,92,1,0,0,0,132,95,1,0,0,
		0,132,98,1,0,0,0,132,99,1,0,0,0,132,100,1,0,0,0,132,101,1,0,0,0,132,102,
		1,0,0,0,132,105,1,0,0,0,132,108,1,0,0,0,132,111,1,0,0,0,132,114,1,0,0,
		0,132,117,1,0,0,0,132,120,1,0,0,0,132,123,1,0,0,0,132,126,1,0,0,0,132,
		129,1,0,0,0,133,5,1,0,0,0,134,135,5,2,0,0,135,136,5,3,0,0,136,137,3,52,
		26,0,137,138,5,4,0,0,138,141,3,74,37,0,139,140,5,5,0,0,140,142,3,8,4,0,
		141,139,1,0,0,0,141,142,1,0,0,0,142,7,1,0,0,0,143,146,3,74,37,0,144,146,
		3,6,3,0,145,143,1,0,0,0,145,144,1,0,0,0,146,9,1,0,0,0,147,148,3,70,35,
		0,148,149,5,55,0,0,149,11,1,0,0,0,150,151,3,10,5,0,151,154,5,6,0,0,152,
		155,3,52,26,0,153,155,3,62,31,0,154,152,1,0,0,0,154,153,1,0,0,0,155,13,
		1,0,0,0,156,157,5,55,0,0,157,158,5,6,0,0,158,159,3,52,26,0,159,15,1,0,
		0,0,160,161,5,55,0,0,161,162,5,7,0,0,162,163,3,52,26,0,163,164,5,8,0,0,
		164,165,5,6,0,0,165,166,3,52,26,0,166,17,1,0,0,0,167,168,5,55,0,0,168,
		169,5,7,0,0,169,170,3,52,26,0,170,171,5,8,0,0,171,172,5,9,0,0,172,19,1,
		0,0,0,173,176,5,55,0,0,174,176,3,34,17,0,175,173,1,0,0,0,175,174,1,0,0,
		0,176,177,1,0,0,0,177,178,5,10,0,0,178,179,3,52,26,0,179,180,5,11,0,0,
		180,181,3,52,26,0,181,182,5,4,0,0,182,21,1,0,0,0,183,186,5,55,0,0,184,
		186,3,34,17,0,185,183,1,0,0,0,185,184,1,0,0,0,186,187,1,0,0,0,187,188,
		5,12,0,0,188,23,1,0,0,0,189,192,5,55,0,0,190,192,3,34,17,0,191,189,1,0,
		0,0,191,190,1,0,0,0,192,193,1,0,0,0,193,194,5,13,0,0,194,25,1,0,0,0,195,
		198,5,55,0,0,196,198,3,34,17,0,197,195,1,0,0,0,197,196,1,0,0,0,198,199,
		1,0,0,0,199,200,5,14,0,0,200,201,3,52,26,0,201,202,5,11,0,0,202,203,3,
		52,26,0,203,204,5,4,0,0,204,27,1,0,0,0,205,208,5,55,0,0,206,208,3,34,17,
		0,207,205,1,0,0,0,207,206,1,0,0,0,208,209,1,0,0,0,209,210,5,15,0,0,210,
		211,3,52,26,0,211,212,5,11,0,0,212,213,3,52,26,0,213,214,5,4,0,0,214,29,
		1,0,0,0,215,218,5,55,0,0,216,218,3,34,17,0,217,215,1,0,0,0,217,216,1,0,
		0,0,218,219,1,0,0,0,219,220,5,16,0,0,220,31,1,0,0,0,221,224,5,55,0,0,222,
		224,3,34,17,0,223,221,1,0,0,0,223,222,1,0,0,0,224,225,1,0,0,0,225,226,
		5,17,0,0,226,227,3,52,26,0,227,228,5,11,0,0,228,229,3,52,26,0,229,230,
		5,4,0,0,230,33,1,0,0,0,231,232,5,55,0,0,232,241,5,3,0,0,233,238,3,52,26,
		0,234,235,5,11,0,0,235,237,3,52,26,0,236,234,1,0,0,0,237,240,1,0,0,0,238,
		236,1,0,0,0,238,239,1,0,0,0,239,242,1,0,0,0,240,238,1,0,0,0,241,233,1,
		0,0,0,241,242,1,0,0,0,242,243,1,0,0,0,243,244,5,4,0,0,244,35,1,0,0,0,245,
		246,5,18,0,0,246,249,5,3,0,0,247,250,3,12,6,0,248,250,3,14,7,0,249,247,
		1,0,0,0,249,248,1,0,0,0,250,251,1,0,0,0,251,252,5,1,0,0,252,253,3,52,26,
		0,253,254,5,1,0,0,254,255,3,14,7,0,255,256,5,4,0,0,256,257,3,74,37,0,257,
		37,1,0,0,0,258,259,5,19,0,0,259,260,5,3,0,0,260,261,3,52,26,0,261,262,
		5,4,0,0,262,263,3,74,37,0,263,39,1,0,0,0,264,265,5,20,0,0,265,266,5,55,
		0,0,266,275,5,3,0,0,267,272,3,10,5,0,268,269,5,11,0,0,269,271,3,10,5,0,
		270,268,1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,276,
		1,0,0,0,274,272,1,0,0,0,275,267,1,0,0,0,275,276,1,0,0,0,276,277,1,0,0,
		0,277,280,5,4,0,0,278,279,5,21,0,0,279,281,3,70,35,0,280,278,1,0,0,0,280,
		281,1,0,0,0,281,282,1,0,0,0,282,283,3,74,37,0,283,41,1,0,0,0,284,286,5,
		22,0,0,285,287,3,52,26,0,286,285,1,0,0,0,286,287,1,0,0,0,287,43,1,0,0,
		0,288,289,5,23,0,0,289,290,3,52,26,0,290,291,5,4,0,0,291,45,1,0,0,0,292,
		293,5,24,0,0,293,294,3,52,26,0,294,295,5,4,0,0,295,47,1,0,0,0,296,297,
		5,25,0,0,297,298,3,52,26,0,298,299,5,11,0,0,299,300,3,52,26,0,300,301,
		5,4,0,0,301,49,1,0,0,0,302,305,5,55,0,0,303,305,3,34,17,0,304,302,1,0,
		0,0,304,303,1,0,0,0,305,306,1,0,0,0,306,307,5,26,0,0,307,308,3,52,26,0,
		308,309,5,4,0,0,309,51,1,0,0,0,310,311,6,26,-1,0,311,326,5,55,0,0,312,
		326,3,34,17,0,313,314,5,3,0,0,314,315,3,52,26,0,315,316,5,4,0,0,316,326,
		1,0,0,0,317,326,3,62,31,0,318,326,3,66,33,0,319,326,3,46,23,0,320,326,
		3,48,24,0,321,326,3,50,25,0,322,326,3,22,11,0,323,326,3,30,15,0,324,326,
		3,72,36,0,325,310,1,0,0,0,325,312,1,0,0,0,325,313,1,0,0,0,325,317,1,0,
		0,0,325,318,1,0,0,0,325,319,1,0,0,0,325,320,1,0,0,0,325,321,1,0,0,0,325,
		322,1,0,0,0,325,323,1,0,0,0,325,324,1,0,0,0,326,345,1,0,0,0,327,328,10,
		12,0,0,328,329,3,54,27,0,329,330,3,52,26,13,330,344,1,0,0,0,331,332,10,
		11,0,0,332,333,3,56,28,0,333,334,3,52,26,12,334,344,1,0,0,0,335,336,10,
		10,0,0,336,337,3,58,29,0,337,338,3,52,26,11,338,344,1,0,0,0,339,340,10,
		9,0,0,340,341,3,60,30,0,341,342,3,52,26,10,342,344,1,0,0,0,343,327,1,0,
		0,0,343,331,1,0,0,0,343,335,1,0,0,0,343,339,1,0,0,0,344,347,1,0,0,0,345,
		343,1,0,0,0,345,346,1,0,0,0,346,53,1,0,0,0,347,345,1,0,0,0,348,349,7,0,
		0,0,349,55,1,0,0,0,350,351,7,1,0,0,351,57,1,0,0,0,352,353,7,2,0,0,353,
		59,1,0,0,0,354,355,7,3,0,0,355,61,1,0,0,0,356,358,5,7,0,0,357,359,3,64,
		32,0,358,357,1,0,0,0,358,359,1,0,0,0,359,360,1,0,0,0,360,363,5,8,0,0,361,
		363,5,39,0,0,362,356,1,0,0,0,362,361,1,0,0,0,363,63,1,0,0,0,364,369,3,
		52,26,0,365,366,5,11,0,0,366,368,3,52,26,0,367,365,1,0,0,0,368,371,1,0,
		0,0,369,367,1,0,0,0,369,370,1,0,0,0,370,65,1,0,0,0,371,369,1,0,0,0,372,
		373,5,55,0,0,373,374,5,7,0,0,374,375,3,52,26,0,375,376,5,8,0,0,376,67,
		1,0,0,0,377,378,7,4,0,0,378,69,1,0,0,0,379,384,3,68,34,0,380,381,3,68,
		34,0,381,382,5,39,0,0,382,384,1,0,0,0,383,379,1,0,0,0,383,380,1,0,0,0,
		384,71,1,0,0,0,385,392,5,47,0,0,386,392,5,48,0,0,387,392,5,49,0,0,388,
		392,5,51,0,0,389,392,5,50,0,0,390,392,5,52,0,0,391,385,1,0,0,0,391,386,
		1,0,0,0,391,387,1,0,0,0,391,388,1,0,0,0,391,389,1,0,0,0,391,390,1,0,0,
		0,392,73,1,0,0,0,393,397,5,45,0,0,394,396,3,2,1,0,395,394,1,0,0,0,396,
		399,1,0,0,0,397,395,1,0,0,0,397,398,1,0,0,0,398,400,1,0,0,0,399,397,1,
		0,0,0,400,401,5,46,0,0,401,75,1,0,0,0,29,79,132,141,145,154,175,185,191,
		197,207,217,223,238,241,249,272,275,280,286,304,325,343,345,358,362,369,
		383,391,397
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
